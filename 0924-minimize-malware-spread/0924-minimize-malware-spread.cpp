class DSU { 
public:
    vector<int> parent, size;
    DSU(int n) { 
        parent.resize(n);
        size.resize(n); 
        for(int i = 0;i<n;i++) {
            parent[i] = i; 
            size[i] = 1; 
        }
    }

    int findParent(int node) {
        if(node == parent[node])
            return node; 
        return parent[node] = findParent(parent[node]); 
    }

    void unionBySize(int u, int v) {
        int ulp_u = findParent(u); 
        int ulp_v = findParent(v); 
        if(ulp_u == ulp_v) return; 
        if(size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v; 
            size[ulp_v] += size[ulp_u]; 
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v]; 
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU ds(n);
        
        for(int i = 0;i < n;i++)
        {
            for(int j = i+1;j < n;j++)
            {
                if(graph[i][j] == 1)
                    ds.unionBySize(i,j);
            }
        }
        
        vector<int> infected(n,0);
        
        int mini = INT_MAX;
        for(auto& it:initial)
        {
            int parent = ds.findParent(it);
            infected[parent]++;
            mini = min(mini,it);
        }
        
        int ans = -1;
        int maxi = INT_MIN;
        for(auto& it:initial)
        {
            int parent = ds.findParent(it);
            int size = ds.size[parent];
            if(infected[parent] == 1 && size >= maxi)
            {
                if(maxi == size)
                {
                    ans = min(ans, it);
                }
                else
                {
                    ans = it;
                }
                maxi = max(maxi, size);
            }
        }
        return ans == -1 ? mini : ans;
    }
};